tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y') %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
} else {
# Truncate Last_Update to daily values
tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
return(tmp.dt)
}
}) %>% rbindlist(fill=TRUE)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
us_deaths.dt
# trim whitespace and any trailing digits
#trim<- function(x) return(sub('\\s\\d$', '', x))
trim<- function(x) return(tstrsplit(x, "\\s[A-Z]", keep=1))
# x <- dates.list[[49]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y') %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
} else {
# Truncate Last_Update to daily values
tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
return(tmp.dt)
}
}) %>% rbindlist(fill=TRUE)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
us_deaths.dt
# trim whitespace and any trailing digits
#trim<- function(x) return(sub('\\s\\d$', '', x))
trim<- function(x) return(tstrsplit(x, "[\\s][A-Z]", keep=1))
# x <- dates.list[[49]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y') %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
} else {
# Truncate Last_Update to daily values
tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
return(tmp.dt)
}
}) %>% rbindlist(fill=TRUE)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
us_deaths.dt
# trim whitespace and any trailing digits
#trim<- function(x) return(sub('\\s\\d$', '', x))
trim<- function(x) return(tstrsplit(x, "[\\sA-Z]", keep=1))
# x <- dates.list[[49]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y') %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
} else {
# Truncate Last_Update to daily values
tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
return(tmp.dt)
}
}) %>% rbindlist(fill=TRUE)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
us_deaths.dt
# trim whitespace and any trailing digits
#trim<- function(x) return(sub('\\s\\d$', '', x))
trim<- function(x) return(tstrsplit(x, "\\s[A-Z]", keep=1))
# x <- dates.list[[49]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y') %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
} else {
# Truncate Last_Update to daily values
tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
return(tmp.dt)
}
}) %>% rbindlist(fill=TRUE)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
us_deaths.dt
'2020-02-01T19:43:03' %>% trim
'2020-02-01T19:43:03' %>% tstrsplit(., "\\s", keep=1)
'2020-02-01T19:43:03' %>% tstrsplit(., "[A-Z]", keep=1)
'2020-02-01 19:43:03' %>% tstrsplit(., "[A-Z]", keep=1)
'2020-02-01 19:43:03' %>% tstrsplit(., "[A-Z]\\s", keep=1)
# trim whitespace and any trailing digits
#trim<- function(x) return(sub('\\s\\d$', '', x))
trim<- function(x) return(tstrsplit(x, "\\s|[A-Z]", keep=1))
# x <- dates.list[[49]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y') %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
} else {
# Truncate Last_Update to daily values
tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
return(tmp.dt)
}
}) %>% rbindlist(fill=TRUE)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
us_deaths.dt
'2020-02-01 19:43:03' %>% tstrsplit(., "[A-Z]|\\s", keep=1)
'2020-02-01T19:43:03' %>% tstrsplit(., "[A-Z]|\\s", keep=1)
x <- dates.list[[1]]
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
tmp.dt
substr(tmp.dt$Last_Update, 1, 9) %>%
trim
substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y')
# trim whitespace and any trailing digits
#trim<- function(x) return(sub('\\s\\d$', '', x))
trim<- function(x) return(tstrsplit(x, "\\s|[A-Z]", keep=1) %>%unlist)
# x <- dates.list[[1]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y') %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
} else {
# Truncate Last_Update to daily values
tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
return(tmp.dt)
}
}) %>% rbindlist(fill=TRUE)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
us_deaths.dt
data.dt$Last_Update %>% unique
'3/14/20 15:00' %>% trim
'3/14/20 15:00' %>% trim %>% parse_date_time()
'3/14/20 15:00' %>% trim %>% parse_date_time(orders='m/d/y')
'3/14/20 15:00' %>% trim %>% parse_date_time(orders='m/d/y') %>%substr(.,1,20)
'3/14/20 15:00' %>% trim %>% parse_date_time(orders='m/d/y') %>%substr(.,1,10)
'2020-03-14' %>% length
'2020-03-14' %>% as.character %>% length
'2020-03-14' %>% parse_date_time(orders='m/d/y')
'2020-03-14' %>% as.vector %>% length
'2020-03-14'[1]
'2020-03-14'[[1]]
'2020-03-14' %>% toString()
'2020-03-14' %>% toString() %>% length
'3/13/20 %>% length'
'3/13/20' %>% length
'3/13/20 ' %>% trim
'3/13/20 ' %>% trim %>% length
'3/13/20 ' %>% trim %>% as.vector %>% length
'3/13/20 ' %>% trim %>% as.character %>% length
'3/13/20 ' %>% trim %>% as.list() %>% length
'3/13/20 ' %>% trim %>% as.character.Date() %>% length
'3/13/20 ' %>% trim %>% as.character.Date()
?as.character.Date
'3/13/20 ' %>% trim %>% as.character.Date(tryFormats=c("%Y-%m-%d"))
'3/13/20 ' %>% trim %>% as.character.Date(tryFormats=c("%Y-%m-%d", "%m/%d/%y"))
parse_date_time()
?parse_date_time()
'3/13/20 ' %>% trim %>% parse_date_time(orders =c("%Y-%m-%d", "%m/%d/%y"))
# x <- dates.list[[1]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
#if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders='m/d/y') %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
#} else {
# Truncate Last_Update to daily values
# tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
# return(tmp.dt)
#}
}) %>% rbindlist(fill=TRUE)
# x <- dates.list[[1]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
#if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- substr(tmp.dt$Last_Update, 1, 9) %>%
trim %>%
parse_date_time(orders=c('m/d/y','%Y-%m-%d')) %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
#} else {
# Truncate Last_Update to daily values
# tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
# return(tmp.dt)
#}
}) %>% rbindlist(fill=TRUE)
x <- dates.list[[1]]
rm(data.dt)
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
colnames(tmp.dt)
substr(tmp.dt$Last_Update, 1, 9) %>%
trim
tmp.dt$Last_Update
tmp.dt$Last_Update %>%
trim
tmp.dt$Last_Update %>%
trim %>%
parse_date_time(orders=c('%m/%d/%y','%m/%d/%Y','%Y-%m-%d'))
# x <- dates.list[[1]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
#if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- tmp.dt$Last_Update %>%
trim %>%
parse_date_time(orders=c('%m/%d/%y','%m/%d/%Y','%Y-%m-%d'))# %>%
substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
#} else {
# Truncate Last_Update to daily values
# tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
# return(tmp.dt)
#}
}) %>% rbindlist(fill=TRUE)
# x <- dates.list[[1]]
data.dt <- lapply(dates.list, function(x) {
tmp.dt <- fread(paste0(git.path,'/Code/COVID19-Data-Exploration/data/',x)) %>% data.table
colnames(tmp.dt) <- colnames(tmp.dt) %>% gsub('[ \\/]', '_', .)  # sub spaces and slashes for underscore
# Fix date formatting for first 10 days
#if (tstrsplit(x, split='\\.', keep=1) < '02-02-2020') {
tryCatch({
tmp.dt$Last_Update <- tmp.dt$Last_Update %>%
trim %>%
parse_date_time(orders=c('%m/%d/%y','%m/%d/%Y','%Y-%m-%d'))# %>%
#substr(., 1, 10)
return(tmp.dt)},
warning = function(w) {
message(paste('Warning!  Check file:', x))
},
error = function(e) {
message(paste('Error!  Check file', x))
}
)
#} else {
# Truncate Last_Update to daily values
# tmp.dt$Last_Update <- tmp.dt$Last_Update %>% trim
# return(tmp.dt)
#}
}) %>% rbindlist(fill=TRUE)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
us_deaths.dt
data.dt$Last_Update %>%unique
sum(us_deaths.dt$Deaths)
us_deaths.dt <- data.dt[data.dt$Country_Region=='US',] %>% group_by(Last_Update) %>% summarize(Deaths=max(Deaths)) %>% data.table
sum(us_deaths.dt$Deaths)
us_deaths.dt
sum(us_deaths.dt$Deaths, na.rm=TRUE)
rm(list=ls())
install.packages("bench")
source('~/Code/COVID19-Data-Exploration/scripts/R/sf_example_simple.R', echo=TRUE)
bench::mark({
report_data.dt[report_data.dt$country_region=='US',]
report_data.sf[report_data.sf$country_region=='US',]
})
?bench::mark
bench::mark(
report_data.dt[report_data.dt$country_region=='US',],
report_data.sf[report_data.sf$country_region=='US',]
)
source('~/Code/COVID19-Data-Exploration/scripts/R/sf_example_simple.R', echo=TRUE)
bench::mark(
b1 <- report_data.dt[report_data.dt$country_region=='US',],
b2 <- report_data.sf[report_data.sf$country_region=='US',]
)
bench::mark(
b1 <- report_data.dt[report_data.dt$country_region=='US',],
b2 <- report_data.sf[report_data.sf$country_region=='US',] %>% data.table
)
us_data.dt <- st_as_sf(report_data.dt, coords = c("longitude", "latitude"), crs=4326)
us_data.dt <- report_data.dt[report_data.dt$country_region=='US',]
us_data.sf <- st_as_sf(report_data.dt, coords = c("longitude", "latitude"), crs=4326)
mapview(us_data.dt )
us_data.sf
mapview(us_data.sf)
us_data.dt <- report_data.dt[report_data.dt$country_region=='US',]
us_data.sf <- st_as_sf(us_data.dt, coords = c("longitude", "latitude"), crs=4326)
mapview(us_data.sf)
source('~/Code/COVID19-Data-Exploration/scripts/R/sf_example_simple.R', echo=TRUE)
us_data.sf %>% dissolve
library(sf)
library(magrittr)
library(data.table)
library(dplyr)
library(RPostgreSQL)
library(mapview)
# Grab data from database
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Control_Test",
host = "10.12.50.107", port = 5432,
user = 'covid_users', password = 'thissucks19')
report_data.dt <- dbGetQuery(con, 'SELECT * FROM covid_data.report_data') %>% data.table
# remove NA's
report_data.dt <- report_data.dt[!is.na(report_data.dt$latitude) &
!is.na(report_data.dt$longitude),]
# Create spatial object from data table and view on global map
report_data.sf <- st_as_sf(report_data.dt, coords = c("longitude", "latitude"), crs=4326)
mapview(report_data.sf)
us_data.dt <- report_data.dt[report_data.dt$country_region=='US',]
us_data.sf <- st_as_sf(us_data.dt, coords = c("longitude", "latitude"), crs=4326)
us_data.sf %>% dissolve
mapview(us_data.sf %>% group_by() %>% summarize)
us_data.sf %>% polygonize
us_data.sf %>% st_polygonize
source('C:/Users/zach/Documents/Code/COVID19-Data-Exploration/scripts/R/insert_report_data.R')
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Control_Test",
host = "10.12.50.107", port = 5432,
user = 'covid_users', password = 'thissucks19')
report_data.dt <- dbGetQuery(con, 'SELECT * FROM covid_data.report_data') %>% data.table
dbDisconnect(con)
library(sf)
library(magrittr)
library(data.table)
library(dplyr)
library(RPostgreSQL)
library(mapview)
# source('C:/Users/zach/Documents/Code/COVID19-Data-Exploration/scripts/R/insert_report_data.R')
# Grab data from database
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Control_Test",
host = "10.12.50.107", port = 5432,
user = 'covid_users', password = 'thissucks19')
report_data.dt <- dbGetQuery(con, 'SELECT * FROM covid_data.report_data') %>% data.table
dbDisconnect(con)
report_data.dt
# Grab data from database
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Control_Test",
host = "10.12.50.107", port = 5432,
user = 'covid_users', password = 'thissucks19')
report_data.dt <- dbGetQuery(con, 'SELECT * FROM covid_data.report_data WHERE country_region="US"') %>% data.table
dbDisconnect(con)
library(sf)
library(magrittr)
library(data.table)
library(dplyr)
library(RPostgreSQL)
library(mapview)
# source('C:/Users/zach/Documents/Code/COVID19-Data-Exploration/scripts/R/insert_report_data.R')
# Grab data from database
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Control_Test",
host = "10.12.50.107", port = 5432,
user = 'covid_users', password = 'thissucks19')
report_data.dt <- dbGetQuery(con, 'SELECT * FROM covid_data.report_data WHERE country_region="US"') %>% data.table
dbDisconnect(con)
report_data.dt
library(sf)
library(magrittr)
library(data.table)
library(dplyr)
library(RPostgreSQL)
library(mapview)
# source('C:/Users/zach/Documents/Code/COVID19-Data-Exploration/scripts/R/insert_report_data.R')
# Grab data from database
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Control_Test",
host = "10.12.50.107", port = 5432,
user = 'covid_users', password = 'thissucks19')
report_data.dt <- dbGetQuery(con, "SELECT * FROM covid_data.report_data WHERE country_region='US'") %>% data.table
dbDisconnect(con)
report_data.dt
# report_data.dt <- dbGetQuery(con, "SELECT * FROM covid_data.report_data WHERE country_region='US'") %>% data.table
report_data.dt <- dbGetQuery(con, "SELECT * FROM covid_data.report_data") %>% data.table
# source('C:/Users/zach/Documents/Code/COVID19-Data-Exploration/scripts/R/insert_report_data.R')
# Grab data from database
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Control_Test",
host = "10.12.50.107", port = 5432,
user = 'covid_users', password = 'thissucks19')
us_data.dt <- dbGetQuery(con, "SELECT * FROM covid_data.report_data WHERE country_region='US'") %>% data.table
global_data.dt <- dbGetQuery(con, "SELECT * FROM covid_data.report_data") %>% data.table
dbDisconnect(con)
us_data.dt
global_data.dt
library(sf)
library(magrittr)
library(data.table)
library(RPostgreSQL)
library(mapview)
source('C:/Users/zach/Documents/Code/COVID19-Data-Exploration/scripts/R/insert_report_data.R')
source('~/Code/COVID19-Data-Exploration/scripts/R/session2/sf_example_simple.R', echo=TRUE)
source('~/Code/COVID19-Data-Exploration/scripts/R/session2/sf_example_simple.R', echo=TRUE)
source('~/Code/COVID19-Data-Exploration/scripts/R/session2/sf_example_simple.R', echo=TRUE)
getwd()
setwd(file.path(Sys.getenv('HOME'), 'Code/COVID19-Data-Exploration/blog/'))
blogdown::serve_site()
update.packages(ask=FALSE, checkBuilt = TRUE)
